
import base64
exec base64.b64decode("IyBNb2RpZmllZCBCeSBAREFSSy1EZXZpbAppbXBvcnQgcmUKZnJvbSBvcyBpbXBvcnQgZW52aXJvbgoKaWRfcGF0dGVybiA9IHJlLmNvbXBpbGUocideLlxkKyQnKQpkZWYgaXNfZW5hYmxlZCh2YWx1ZSwgZGVmYXVsdCk6CiAgICBpZiB2YWx1ZS5sb3dlcigpIGluIFsidHJ1ZSIsICJ5ZXMiLCAiMSIsICJlbmFibGUiLCAieSJdOgogICAgICAgIHJldHVybiBUcnVlCiAgICBlbGlmIHZhbHVlLmxvd2VyKCkgaW4gWyJmYWxzZSIsICJubyIsICIwIiwgImRpc2FibGUiLCAibiJdOgogICAgICAgIHJldHVybiBGYWxzZQogICAgZWxzZToKICAgICAgICByZXR1cm4gZGVmYXVsdAoKIyBCb3QgaW5mb3JtYXRpb24KU0VTU0lPTiA9ICdGaWxtX3NlYXJjaCcKQVBJX0lEID0gMTk1NjI3MzEKQVBJX0hBU0ggPSAnMTY2NzQ3M2U3MjJmMTdlYWE4Y2NiYjk4ZGM1ZjcyN2QnCkJPVF9UT0tFTiA9ICc1NzY0ODA4MTIyOkFBRkhkRG9MdXRxRGJhdU9XaWh6dmpJME5MUEtXd1lJV0M0JwoKIyBCb3Qgc2V0dGluZ3MKQ0FDSEVfVElNRSA9IGludChlbnZpcm9uLmdldCgnQ0FDSEVfVElNRScsIDMwMCkpClVTRV9DQVBUSU9OX0ZJTFRFUiA9IGJvb2woZW52aXJvbi5nZXQoJ1VTRV9DQVBUSU9OX0ZJTFRFUicsIEZhbHNlKSkKUElDUyA9ICdodHRwczovL3RlbGVncmEucGgvZmlsZS83NDgzZjE3YWJhOWI4YjlmZTNmZDIuanBnIGh0dHBzOi8vdGVsZWdyYS5waC9maWxlLzJiMjVmZTI2YWNmZTJiMDNjNDk4Yi5qcGcgaHR0cHM6Ly90ZWxlZ3JhLnBoL2ZpbGUvY2JjMWIwMmMzZWNjZmZhNDMzOGU3LmpwZyBodHRwczovL3RlbGVncmEucGgvZmlsZS9hZmEzODU3NjI0ZWE3M2Q3NWI5NTIuanBnIGh0dHBzOi8vdGVsZWdyYS5waC9maWxlL2Q5YWVmYmIyZmFkOWFjZjIxNjdlZi5qcGcgaHR0cHM6Ly90ZWxlZ3JhLnBoL2ZpbGUvYTIyNDllZDRlNzA1OWIyODRjMDBkLmpwZyBodHRwczovL3RlbGVncmEucGgvZmlsZS80ZTQ2NTc3Nzg0ZGYxZDZiN2ZjNjguanBnIGh0dHBzOi8vdGVsZWdyYS5waC9maWxlL2QzNzc1YTBmZmIyNTc0MDM0ZjRmMy5qcGcgaHR0cHM6Ly90ZWxlZ3JhLnBoL2ZpbGUvYTM4MGRmNGNkN2Y4OWRiOWIzZWM0LmpwZycKCiMgQWRtaW5zLCBDaGFubmVscyAmIFVzZXJzCkFETUlOUyA9IFs1NTEyMzgyOTM4LCAyMDcxNjQ0NTQwXQpDSEFOTkVMUyA9IFstMTAwMTYyMTI3Mjc5NCwgLTEwMDE2NzMxODczMjIsIC0xMDAxNjA3NjkyMTY5XQphdXRoX3VzZXJzID0gW2ludCh1c2VyKSBpZiBpZF9wYXR0ZXJuLnNlYXJjaCh1c2VyKSBlbHNlIHVzZXIgZm9yIHVzZXIgaW4gZW52aXJvbi5nZXQoJ0FVVEhfVVNFUlMnLCAnJykuc3BsaXQoKV0KQVVUSF9VU0VSUyA9IChhdXRoX3VzZXJzICsgQURNSU5TKSBpZiBhdXRoX3VzZXJzIGVsc2UgW10KYXV0aF9jaGFubmVsID0gZW52aXJvbi5nZXQoJ0FVVEhfQ0hBTk5FTCcpCmF1dGhfZ3JwID0gZW52aXJvbi5nZXQoJ0FVVEhfR1JPVVAnKQpBVVRIX0NIQU5ORUwgPSBpbnQoYXV0aF9jaGFubmVsKSBpZiBhdXRoX2NoYW5uZWwgYW5kIGlkX3BhdHRlcm4uc2VhcmNoKGF1dGhfY2hhbm5lbCkgZWxzZSBOb25lCkFVVEhfR1JPVVBTID0gW2ludChjaCkgZm9yIGNoIGluIGF1dGhfZ3JwLnNwbGl0KCldIGlmIGF1dGhfZ3JwIGVsc2UgTm9uZQoKIyBNb25nb0RCIGluZm9ybWF0aW9uCkRBVEFCQVNFX1VSSSA9ICdtb25nb2RiK3NydjovL2ZpbG0tZGV0ZWN0aXZlOmRhcmtkZXZpbEBkYXJrZGV2aWwubGNmbGxvcy5tb25nb2RiLm5ldC8/cmV0cnlXcml0ZXM9dHJ1ZSZ3PW1ham9yaXR5JwpEQVRBQkFTRV9OQU1FID0gJ2RhcmtkZXZpbCcKQ09MTEVDVElPTl9OQU1FID0gJ0RldmlsX0ZpbG1zJwoKIyBPdGhlcnMKTE9HX0NIQU5ORUwgPSBbLTEwMDE3ODczMzEwNTRdClNVUFBPUlRfQ0hBVCA9IGVudmlyb24uZ2V0KCdTVVBQT1JUX0NIQVQnLCAnRGFya0RldmlsQm90eicpClBfVFRJX1NIT1dfT0ZGID0gaXNfZW5hYmxlZCgoZW52aXJvbi5nZXQoJ1BfVFRJX1NIT1dfT0ZGJywgIkZhbHNlIikpLCBGYWxzZSkKSU1EQiA9IGlzX2VuYWJsZWQoKGVudmlyb24uZ2V0KCdJTURCJywgIlRydWUiKSksIFRydWUpClNJTkdMRV9CVVRUT04gPSBpc19lbmFibGVkKChlbnZpcm9uLmdldCgnU0lOR0xFX0JVVFRPTicsICJUcnVlIikpLCBUcnVlKQpDVVNUT01fRklMRV9DQVBUSU9OID0gZW52aXJvbi5nZXQoIkNVU1RPTV9GSUxFX0NBUFRJT04iLCBOb25lKQpCQVRDSF9GSUxFX0NBUFRJT04gPSBlbnZpcm9uLmdldCgiQkFUQ0hfRklMRV9DQVBUSU9OIiwgQ1VTVE9NX0ZJTEVfQ0FQVElPTikKSU1EQl9URU1QTEFURSA9IGVudmlyb24uZ2V0KCJJTURCX1RFTVBMQVRFIiwgIvCfpKlIZXksIHttZXNzYWdlLmZyb21fdXNlci5tZW50aW9ufSDwnZmx8J2agfCdmb5cbiDhtIDKgOG0hyDKj+G0j+G0nCDKn+G0j+G0j+G0i8mqybTJoiDqnLDhtI/KgCDhtJvKnMmq6pyxIOG0jeG0j+G0oMmq4bSHP1xuIPCfkYkge3F1ZXJ5fSDwn5GIXG5cbjxiPuKZpe+4j/CdmoPwnZm48J2ag/CdmbvwnZm0PC9iPjogPGEgaHJlZj17dXJsfT57dGl0bGV9PC9hPlxu8J+OrSDwnZm28J2ZtPCdmb3wnZqB8J2ZtPCdmoI6IHtnZW5yZXN9XG7wn5OGIPCdmojwnZm08J2ZsPCdmoE6IDxhIGhyZWY9e3VybH0vcmVsZWFzZWluZm8+e3llYXJ9PC9hPlxu8J+MnyDwnZqB8J2ZsPCdmoPwnZm48J2ZvfCdmbY6IDxhIGhyZWY9e3VybH0vcmF0aW5ncz57cmF0aW5nfTwvYT4gLyAxMCAo8J2ZsfCdmbDwnZqC8J2ZtPCdmbMg8J2ZvvCdmb0ge3ZvdGVzfSDwnZqE8J2agvCdmbTwnZqBIPCdmoHwnZmw8J2ag/CdmbjwnZm98J2ZtvCdmoIuKVxu8J+SvSDwnZqB8J2ahPCdmb3wnZqD8J2ZuPCdmbzwnZm0OiB7cnVudGltZX0gTWludXRlc1xu8J+ThiDwnZqB8J2ZtPCdmbvwnZm08J2ZsPCdmoLwnZm08J2ZsyA6IHtyZWxlYXNlX2RhdGV9XG7wn4yNIPCdmbLwnZm+8J2ahPCdmb3wnZqD8J2agfCdmbjwnZm08J2agiA6IDxjb2RlPntjb3VudHJpZXN9PC9jb2RlPlxuXG7imJXwnZm/8J2ZvvCdmobwnZm08J2agfCdmbMg8J2ZsfCdmojimJVcbiA8YSBocmVmPWh0dHBzOi8vdC5tZS9EYXJrRGV2aWxCb3R6PsKp77iP4bSF4bSAyoDhtIsg4bSF4bSH4bSgyarKnyDKmeG0j+G0m+G0ojwvYT5cbiA8YSBocmVmPWh0dHBzOi8vdC5tZS9UZWFtRGFya0RldmlsPsKp77iP4bSb4bSH4bSA4bSNIOG0heG0gMqA4bSLIOG0heG0h+G0oMmqyp88L2E+IikKTE9OR19JTURCX0RFU0NSSVBUSU9OID0gaXNfZW5hYmxlZChlbnZpcm9uLmdldCgiTE9OR19JTURCX0RFU0NSSVBUSU9OIiwgIkZhbHNlIiksIEZhbHNlKQpTUEVMTF9DSEVDS19SRVBMWSA9IGlzX2VuYWJsZWQoZW52aXJvbi5nZXQoIlNQRUxMX0NIRUNLX1JFUExZIiwgIlRydWUiKSwgVHJ1ZSkKTUFYX0xJU1RfRUxNID0gZW52aXJvbi5nZXQoIk1BWF9MSVNUX0VMTSIsIE5vbmUpCklOREVYX1JFUV9DSEFOTkVMID0gWy0xMDAxNzg3MzMxMDU0XQpGSUxFX1NUT1JFX0NIQU5ORUwgPSBbaW50KGNoKSBmb3IgY2ggaW4gKGVudmlyb24uZ2V0KCdGSUxFX1NUT1JFX0NIQU5ORUwnLCAnJykpLnNwbGl0KCldCk1FTENPV19ORVdfVVNFUlMgPSBpc19lbmFibGVkKChlbnZpcm9uLmdldCgnTUVMQ09XX05FV19VU0VSUycsICJUcnVlIikpLCBUcnVlKQpQUk9URUNUX0NPTlRFTlQgPSBpc19lbmFibGVkKChlbnZpcm9uLmdldCgnUFJPVEVDVF9DT05URU5UJywgIkZhbHNlIikpLCBGYWxzZSkKUFVCTElDX0ZJTEVfU1RPUkUgPSBpc19lbmFibGVkKChlbnZpcm9uLmdldCgnUFVCTElDX0ZJTEVfU1RPUkUnLCAiVHJ1ZSIpKSwgVHJ1ZSkKCkxPR19TVFIgPSAiQ3VycmVudCBDdXNvbWl6ZWQgQ29uZmlndXJhdGlvbnMgYXJlOi1cbiIKTE9HX1NUUiArPSAoIklNREIgUmVzdWx0cyBhcmUgZW5hYmxlZCwgQm90IHdpbGwgYmUgc2hvd2luZyBpbWRiIGRldGFpbHMgZm9yIHlvdSBxdWVyaWVzLlxuIiBpZiBJTURCIGVsc2UgIklNQkQgUmVzdWx0cyBhcmUgZGlzYWJsZWQuXG4iKQpMT0dfU1RSICs9ICgiUF9UVElfU0hPV19PRkYgZm91bmQgLCBVc2VycyB3aWxsIGJlIHJlZGlyZWN0ZWQgdG8gc2VuZCAvc3RhcnQgdG8gQm90IFBNIGluc3RlYWQgb2Ygc2VuZGluZyBmaWxlIGZpbGUgZGlyZWN0bHlcbiIgaWYgUF9UVElfU0hPV19PRkYgZWxzZSAiUF9UVElfU0hPV19PRkYgaXMgZGlzYWJsZWQgZmlsZXMgd2lsbCBiZSBzZW5kIGluIFBNLCBpbnN0ZWFkIG9mIHNlbmRpbmcgc3RhcnQuXG4iKQpMT0dfU1RSICs9ICgiU0lOR0xFX0JVVFRPTiBpcyBGb3VuZCwgZmlsZW5hbWUgYW5kIGZpbGVzIHNpemUgd2lsbCBiZSBzaG93biBpbiBhIHNpbmdsZSBidXR0b24gaW5zdGVhZCBvZiB0d28gc2VwYXJhdGUgYnV0dG9uc1xuIiBpZiBTSU5HTEVfQlVUVE9OIGVsc2UgIlNJTkdMRV9CVVRUT04gaXMgZGlzYWJsZWQgLCBmaWxlbmFtZSBhbmQgZmlsZV9zaXhlIHdpbGwgYmUgc2hvd24gYXMgZGlmZmVyZW50IGJ1dHRvbnNcbiIpCkxPR19TVFIgKz0gKGYiQ1VTVE9NX0ZJTEVfQ0FQVElPTiBlbmFibGVkIHdpdGggdmFsdWUge0NVU1RPTV9GSUxFX0NBUFRJT059LCB5b3VyIGZpbGVzIHdpbGwgYmUgc2VuZCBhbG9uZyB3aXRoIHRoaXMgY3VzdG9taXplZCBjYXB0aW9uLlxuIiBpZiBDVVNUT01fRklMRV9DQVBUSU9OIGVsc2UgIk5vIENVU1RPTV9GSUxFX0NBUFRJT04gRm91bmQsIERlZmF1bHQgY2FwdGlvbnMgb2YgZmlsZSB3aWxsIGJlIHVzZWQuXG4iKQpMT0dfU1RSICs9ICgiTG9uZyBJTURCIHN0b3J5bGluZSBlbmFibGVkLiIgaWYgTE9OR19JTURCX0RFU0NSSVBUSU9OIGVsc2UgIkxPTkdfSU1EQl9ERVNDUklQVElPTiBpcyBkaXNhYmxlZCAsIFBsb3Qgd2lsbCBiZSBzaG9ydGVyLlxuIikKTE9HX1NUUiArPSAoIlNwZWxsIENoZWNrIE1vZGUgSXMgRW5hYmxlZCwgYm90IHdpbGwgYmUgc3VnZ2VzdGluZyByZWxhdGVkIG1vdmllcyBpZiBtb3ZpZSBub3QgZm91bmRcbiIgaWYgU1BFTExfQ0hFQ0tfUkVQTFkgZWxzZSAiU1BFTExfQ0hFQ0tfUkVQTFkgTW9kZSBkaXNhYmxlZFxuIikKTE9HX1NUUiArPSAoZiJNQVhfTElTVF9FTE0gRm91bmQsIGxvbmcgbGlzdCB3aWxsIGJlIHNob3J0ZW5lZCB0byBmaXJzdCB7TUFYX0xJU1RfRUxNfSBlbGVtZW50c1xuIiBpZiBNQVhfTElTVF9FTE0gZWxzZSAiRnVsbCBMaXN0IG9mIGNhc3RzIGFuZCBjcmV3IHdpbGwgYmUgc2hvd24gaW4gaW1kYiB0ZW1wbGF0ZSwgcmVzdHJpY3QgdGhlbSBieSBhZGRpbmcgYSB2YWx1ZSB0byBNQVhfTElTVF9FTE1cbiIpCkxPR19TVFIgKz0gZiJZb3VyIGN1cnJlbnQgSU1EQiB0ZW1wbGF0ZSBpcyB7SU1EQl9URU1QTEFURX0iCg==")